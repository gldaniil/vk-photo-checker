const cfg = require("./config");
const telegramApi = require("node-telegram-bot-api");
const sequelize = require('./db');
const userModel = require('./models');
const bot = new telegramApi(cfg.tokenTlg, { polling: true });

const startBot = async () => {
  try {
    await sequelize.authenticate();
    sequelize.sync();
    console.log('Connection has been established successfully.');
  } catch (e) {
    console.error('Unable to connect to the database:', e);
  }

  bot.setMyCommands([
    { command: "/start", description: "–ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã" },
    { command: "/add", description: "–î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–∞–±–ª–∏—Ü—É" },
    { command: "/delete", description: "–£–±—Ä–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ç–∞–±–ª–∏—Ü—É" },
    { command: "/info", description: "–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π" },
  ]);
  // –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /add [–ø–∞—Ä–∞–º–µ—Ç—Ä—ã]
  bot.onText(/\/add (.+)/, async (msg, [, match]) => {
    const { id } = msg.chat;
    let idForAdd = match.split(" ");
    idForAdd.forEach(async (userId) => {
      if (Number(userId)) {
        try {
          await userModel.create({userId});
          return bot.sendMessage(id, `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –±—ã–ª —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Ç–∞–±–ª–∏—Ü—É.`);
        } catch {
          return bot.sendMessage(id, `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} —É–∂–µ –µ—Å—Ç—å –≤ —Ç–∞–±–ª–∏—Ü–µ.`);
        }
      } else {
        return bot.sendMessage(id, `${userId} –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞.`);
      }
    });
  });
  // –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /delete [–ø–∞—Ä–∞–º–µ—Ç—Ä—ã]
  bot.onText(/\/delete (.+)/, async (msg, [, match]) => {
    const { id } = msg.chat;
    let idForDel = match.split(" ");
    idForDel.forEach(async (userId) => {
      if (Number(userId)) {
        try {
          await userModel.destroy({
            where: {
              userId: `${userId}`,
            },
            force: true,
          }) 
            ? await bot.sendMessage(id, `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –±—ã–ª —É–¥–∞–ª—ë–Ω –∏–∑ —Ç–∞–±–ª–∏—Ü—ã.`)
            : await bot.sendMessage(id, `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —Ç–∞–±–ª–∏—Ü–µ.`)
        } catch (e) {
          return bot.sendMessage(id, '–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞.');
        }
      } else {
        return bot.sendMessage(id, `${userId} –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –∫–∞–∫ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä.`);
      }
    });
  });

  // bot.on("message", async (msg) => {
  //   const chat = msg.chat;
  //   const text = msg.text;

  //   if (chat.id == cfg.myId) {

  //     if (text === "/start") {
  //       await bot.sendMessage(chat.id, `${text}`);
  //     }
  //     if (text === "/add") {
  //       await bot.sendMessage(chat.id, "–û—Ç–ø—Ä–∞–≤—å id-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
  //       await bot.sendMessage(chat.id, `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω`);
  //     }
  //     return bot.sendMessage(chat.id, "–Ø –ø–æ–Ω–∏–º–∞—é —Ç–æ–ª—å–∫–æ –∫–æ–º–∞–Ω–¥—ã –∏–∑ –ú–µ–Ω—é ü•∫")

  //   } else if (chat.last_name != undefined) {
  //     await bot.sendMessage(
  //       cfg.myId,
  //       `${chat.first_name} ${chat.last_name} (${chat.id}): ${text}`
  //     );

  //   } else {
  //     await bot.sendMessage(
  //       cfg.myId,
  //       `${chat.first_name} (${chat.id}): ${text}`
  //     );
  //   }
  // });
};

startBot();